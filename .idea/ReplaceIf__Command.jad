// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ReplaceIf__Command.java

package Commands;

import MainFiles.Console;
import MainFiles.Main;
import flat.Flat;
import java.io.PrintStream;
import java.util.LinkedHashMap;

// Referenced classes of package Commands:
//            Command, JsonDecoder, CreateFlat

public class ReplaceIf__Command extends Command
{

    public ReplaceIf__Command()
    {
    }

    public void execute(Object var1)
    {
        Integer key = (Integer)var1;
        Flat oldFlat = (Flat)Main.flats.get(Integer.valueOf(Math.abs(key.intValue())));
        if(oldFlat == null)
        {
            System.out.println("\u041D\u0435\u0447\u0435\u0433\u043E \u0437\u0430\u043C\u0435\u043D\u044F\u0442\u044C, \u0442\u0430\u043A \u043A\u0430\u043A \u043D\u0435\u0442\u0443 \u043F\u0430\u0440\u044B \u0434\u043B\u044F \u0442\u0430\u043A\u043E\u0433\u043E \u043A\u043B\u044E\u0447\u0430");
            return;
        }
        try
        {
            Flat newFlat = newFlat();
            if((float)newFlat.compareTo(oldFlat) * Math.signum(key.intValue()) > 0.0F)
            {
                Main.flats.put(Integer.valueOf(Math.abs(key.intValue())), newFlat);
                System.out.println("\u0417\u0430\u043C\u0435\u043D\u0435\u043D\u043E");
            } else
            if(Math.signum(key.intValue()) > 0.0F)
                System.out.println("\u041D\u043E\u0432\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043C\u0435\u043D\u044C\u0448\u0435 \u0441\u0442\u0430\u0440\u043E\u0433\u043E");
            else
                System.out.println("\u041D\u043E\u0432\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0431\u043E\u043B\u044C\u0448\u0435 \u0441\u0442\u0430\u0440\u043E\u0433\u043E");
        }
        catch(NullPointerException e)
        {
            System.out.println("\u041A\u0430\u043A\u043E\u0435-\u0442\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u0443\u0441\u0442\u043E\u0435");
        }
    }

    private Flat newFlat()
    {
        if(Console.splitCommand.length == 3)
        {
            JsonDecoder jsonDecoder = new JsonDecoder(Console.splitCommand[2]);
            return jsonDecoder.getDecodeValueWithoutId();
        } else
        {
            CreateFlat createFlat = new CreateFlat();
            return createFlat.getNewFlat();
        }
    }
}
